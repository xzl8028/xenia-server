// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/xzl8028/xenia-server/model"

// TaskStore is an autogenerated mock type for the TaskStore type
type TaskStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: taskId, includeDeleted
func (_m *TaskStore) Get(taskId string) (*model.Task, *model.AppError) {
	ret := _m.Called(taskId)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(string) *model.Task); ok {
		r0 = rf(taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(taskId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: options
func (_m *TaskStore) GetAll() ([]*model.Task, *model.AppError) {
	ret := _m.Called()

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func() []*model.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// // PermanentDelete provides a mock function with given fields: userId
// func (_m *TaskStore) PermanentDelete(userId string) *model.AppError {
// 	ret := _m.Called(userId)

// 	var r0 *model.AppError
// 	if rf, ok := ret.Get(0).(func(string) *model.AppError); ok {
// 		r0 = rf(userId)
// 	} else {
// 		if ret.Get(0) != nil {
// 			r0 = ret.Get(0).(*model.AppError)
// 		}
// 	}

// 	return r0
// }

// // Save provides a mock function with given fields: task
// func (_m *TaskStore) Save(task *model.Task) (*model.Task, *model.AppError) {
// 	ret := _m.Called(task)

// 	var r0 *model.Task
// 	if rf, ok := ret.Get(0).(func(*model.Task) *model.Task); ok {
// 		r0 = rf(task)
// 	} else {
// 		if ret.Get(0) != nil {
// 			r0 = ret.Get(0).(*model.Task)
// 		}
// 	}

// 	var r1 *model.AppError
// 	if rf, ok := ret.Get(1).(func(*model.Task) *model.AppError); ok {
// 		r1 = rf(task)
// 	} else {
// 		if ret.Get(1) != nil {
// 			r1 = ret.Get(1).(*model.AppError)
// 		}
// 	}

// 	return r0, r1
// }

// Update provides a mock function with given fields: task
func (_m *TaskStore) Update(task *model.Task) (*model.Task, *model.AppError) {
	ret := _m.Called(task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(*model.Task) *model.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Task) *model.AppError); ok {
		r1 = rf(task)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: task
func (_m *TaskStore) Insert(task *model.Task) (*model.Task, *model.AppError) {
	ret := _m.Called(task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(*model.Task) *model.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Task) *model.AppError); ok {
		r1 = rf(task)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

func (_m *TaskStore) GetAllWithTeamId(teamId string) ([]*model.Task, *model.AppError) {
	ret := _m.Called(teamId)

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func() []*model.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}
