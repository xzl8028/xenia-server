// Copyright (c) 2015-present Xenia, Inc. All Rights Reserved.
// See License.txt for license information.

package model

import (
	"bytes"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestTaskTrace(t *testing.T) {
	task := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		UpdateAt:    2,
		DeleteAt:    3,
	}

	require.Equal(t, map[string]interface{}{"user_id": task.UserId}, task.Trace())
}

func TestTaskClone(t *testing.T) {
	task := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		UpdateAt:    2,
		DeleteAt:    3,
	}

	clone := task.Clone()

	require.Equal(t, task, task.Clone())
	require.False(t, task == clone)
}

func TestTaskIsValid(t *testing.T) {
	testCases := []struct {
		Description     string
		Task             *Task
		ExpectedIsValid bool
	}{
		{
			"nil task",
			&Task{},
			false,
		},
		{
			"task with missing user id",
			&Task{
				UserId:      "",
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task with invalid user id",
			&Task{
				UserId:      "invalid",
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task with missing username",
			&Task{
				UserId:      NewId(),
				Username:    "",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task with invalid username",
			&Task{
				UserId:      NewId(),
				Username:    "a@",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task with long description",
			&Task{
				UserId:      "",
				Username:    "username",
				DisplayName: "display name",
				Description: strings.Repeat("x", 1025),
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task with missing creator id",
			&Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     "",
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task without create at timestamp",
			&Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    0,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task without update at timestamp",
			&Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    0,
				DeleteAt:    3,
			},
			false,
		},
		{
			"task",
			&Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    0,
			},
			true,
		},
		{
			"task without description",
			&Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    0,
			},
			true,
		},
		{
			"deleted task",
			&Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "a description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			true,
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Description, func(t *testing.T) {
			if testCase.ExpectedIsValid {
				require.Nil(t, testCase.Task.IsValid())
			} else {
				require.NotNil(t, testCase.Task.IsValid())
			}
		})
	}
}

func TestTaskPreSave(t *testing.T) {
	task := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		DeleteAt:    0,
	}

	originalTask := &*task

	task.PreSave()
	assert.NotEqual(t, 0, task.CreateAt)
	assert.NotEqual(t, 0, task.UpdateAt)

	originalTask.CreateAt = task.CreateAt
	originalTask.UpdateAt = task.UpdateAt
	assert.Equal(t, originalTask, task)
}

func TestTaskPreUpdate(t *testing.T) {
	task := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		DeleteAt:    0,
	}

	originalTask := &*task

	task.PreSave()
	assert.NotEqual(t, 0, task.UpdateAt)

	originalTask.UpdateAt = task.UpdateAt
	assert.Equal(t, originalTask, task)
}

func TestTaskEtag(t *testing.T) {
	t.Run("same etags", func(t *testing.T) {
		task1 := &Task{
			UserId:      NewId(),
			Username:    "username",
			DisplayName: "display name",
			Description: "description",
			OwnerId:     NewId(),
			CreateAt:    1,
			UpdateAt:    2,
			DeleteAt:    3,
		}
		task2 := task1

		assert.Equal(t, task1.Etag(), task2.Etag())
	})
	t.Run("different etags", func(t *testing.T) {
		t.Run("different user id", func(t *testing.T) {
			task1 := &Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			}
			task2 := &Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     task1.OwnerId,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			}

			assert.NotEqual(t, task1.Etag(), task2.Etag())
		})
		t.Run("different update at", func(t *testing.T) {
			task1 := &Task{
				UserId:      NewId(),
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     NewId(),
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			}
			task2 := &Task{
				UserId:      task1.UserId,
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     task1.OwnerId,
				CreateAt:    1,
				UpdateAt:    10,
				DeleteAt:    3,
			}

			assert.NotEqual(t, task1.Etag(), task2.Etag())
		})
	})
}

func TestTaskToAndFromJson(t *testing.T) {
	task1 := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		UpdateAt:    2,
		DeleteAt:    3,
	}

	task2 := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description 2",
		OwnerId:     NewId(),
		CreateAt:    4,
		UpdateAt:    5,
		DeleteAt:    6,
	}

	assert.Equal(t, task1, TaskFromJson(bytes.NewReader(task1.ToJson())))
	assert.Equal(t, task2, TaskFromJson(bytes.NewReader(task2.ToJson())))
}

func sToP(s string) *string {
	return &s
}

func TestTaskPatch(t *testing.T) {
	userId1 := NewId()
	creatorId1 := NewId()

	testCases := []struct {
		Description string
		Task         *Task
		TaskPatch    *TaskPatch
		ExpectedTask *Task
	}{
		{
			"no update",
			&Task{
				UserId:      userId1,
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     creatorId1,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			&TaskPatch{},
			&Task{
				UserId:      userId1,
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     creatorId1,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
		},
		{
			"partial update",
			&Task{
				UserId:      userId1,
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     creatorId1,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			&TaskPatch{
				Username:    sToP("new_username"),
				DisplayName: nil,
				Description: sToP("new description"),
			},
			&Task{
				UserId:      userId1,
				Username:    "new_username",
				DisplayName: "display name",
				Description: "new description",
				OwnerId:     creatorId1,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
		},
		{
			"full update",
			&Task{
				UserId:      userId1,
				Username:    "username",
				DisplayName: "display name",
				Description: "description",
				OwnerId:     creatorId1,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
			&TaskPatch{
				Username:    sToP("new_username"),
				DisplayName: sToP("new display name"),
				Description: sToP("new description"),
			},
			&Task{
				UserId:      userId1,
				Username:    "new_username",
				DisplayName: "new display name",
				Description: "new description",
				OwnerId:     creatorId1,
				CreateAt:    1,
				UpdateAt:    2,
				DeleteAt:    3,
			},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Description, func(t *testing.T) {
			testCase.Task.Patch(testCase.TaskPatch)
			assert.Equal(t, testCase.ExpectedTask, testCase.Task)
		})
	}
}

func TestTaskPatchToAndFromJson(t *testing.T) {
	taskPatch1 := &TaskPatch{
		Username:    sToP("username"),
		DisplayName: sToP("display name"),
		Description: sToP("description"),
	}

	taskPatch2 := &TaskPatch{
		Username:    sToP("username"),
		DisplayName: sToP("display name"),
		Description: sToP("description 2"),
	}

	assert.Equal(t, taskPatch1, TaskPatchFromJson(bytes.NewReader(taskPatch1.ToJson())))
	assert.Equal(t, taskPatch2, TaskPatchFromJson(bytes.NewReader(taskPatch2.ToJson())))
}

func TestUserFromTask(t *testing.T) {
	task1 := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		UpdateAt:    2,
		DeleteAt:    3,
	}

	task2 := &Task{
		UserId:      NewId(),
		Username:    "username2",
		DisplayName: "display name 2",
		Description: "description 2",
		OwnerId:     NewId(),
		CreateAt:    4,
		UpdateAt:    5,
		DeleteAt:    6,
	}

	assert.Equal(t, &User{
		Id:        task1.UserId,
		Username:  "username",
		Email:     "username@localhost",
		FirstName: "display name",
		Roles:     "system_user",
	}, UserFromTask(task1))
	assert.Equal(t, &User{
		Id:        task2.UserId,
		Username:  "username2",
		Email:     "username2@localhost",
		FirstName: "display name 2",
		Roles:     "system_user",
	}, UserFromTask(task2))
}

func TestTaskFromUser(t *testing.T) {
	user := &User{
		Id:       NewId(),
		Username: "username",
		CreateAt: 1,
		UpdateAt: 2,
		DeleteAt: 3,
	}

	assert.Equal(t, &Task{
		OwnerId:     user.Id,
		UserId:      user.Id,
		Username:    "username",
		DisplayName: "username",
	}, TaskFromUser(user))
}

func TestTaskListToAndFromJson(t *testing.T) {
	testCases := []struct {
		Description string
		TaskList     TaskList
	}{
		{
			"empty list",
			TaskList{},
		},
		{
			"single item",
			TaskList{
				&Task{
					UserId:      NewId(),
					Username:    "username",
					DisplayName: "display name",
					Description: "description",
					OwnerId:     NewId(),
					CreateAt:    1,
					UpdateAt:    2,
					DeleteAt:    3,
				},
			},
		},
		{
			"multiple items",
			TaskList{
				&Task{
					UserId:      NewId(),
					Username:    "username",
					DisplayName: "display name",
					Description: "description",
					OwnerId:     NewId(),
					CreateAt:    1,
					UpdateAt:    2,
					DeleteAt:    3,
				},

				&Task{
					UserId:      NewId(),
					Username:    "username",
					DisplayName: "display name",
					Description: "description 2",
					OwnerId:     NewId(),
					CreateAt:    4,
					UpdateAt:    5,
					DeleteAt:    6,
				},
			},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Description, func(t *testing.T) {
			assert.Equal(t, testCase.TaskList, TaskListFromJson(bytes.NewReader(testCase.TaskList.ToJson())))
		})
	}
}

func TestTaskListEtag(t *testing.T) {
	task1 := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		UpdateAt:    2,
		DeleteAt:    3,
	}

	task1Updated := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    1,
		UpdateAt:    10,
		DeleteAt:    3,
	}

	task2 := &Task{
		UserId:      NewId(),
		Username:    "username",
		DisplayName: "display name",
		Description: "description",
		OwnerId:     NewId(),
		CreateAt:    4,
		UpdateAt:    5,
		DeleteAt:    6,
	}

	testCases := []struct {
		Description   string
		TaskListA      TaskList
		TaskListB      TaskList
		ExpectedEqual bool
	}{
		{
			"empty lists",
			TaskList{},
			TaskList{},
			true,
		},
		{
			"single item, same list",
			TaskList{task1},
			TaskList{task1},
			true,
		},
		{
			"single item, different update at",
			TaskList{task1},
			TaskList{task1Updated},
			false,
		},
		{
			"single item vs. multiple items",
			TaskList{task1},
			TaskList{task1, task2},
			false,
		},
		{
			"multiple items, different update at",
			TaskList{task1, task2},
			TaskList{task1Updated, task2},
			false,
		},
		{
			"multiple items, same list",
			TaskList{task1, task2},
			TaskList{task1, task2},
			true,
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Description, func(t *testing.T) {
			if testCase.ExpectedEqual {
				assert.Equal(t, testCase.TaskListA.Etag(), testCase.TaskListB.Etag())
			} else {
				assert.NotEqual(t, testCase.TaskListA.Etag(), testCase.TaskListB.Etag())
			}
		})
	}
}
